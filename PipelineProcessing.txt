Chapter 3: The Request Processing Pipeline â€“ Filters, Servlets, and the MVC Stack
At the heart of any web application lies the mechanism by which incoming requests are received, processed, and transformed into outgoing responses. In a Spring Boot application built upon the Jakarta EE Servlet specification, this process is managed by a layered architecture composed of several key "pluggable" components. Understanding their individual roles, their interrelationships, and the precise order in which they execute is fundamental to building robust and maintainable web services.

This chapter provides a comprehensive breakdown of these core components, illustrating their place in the request lifecycle. We will begin with formal definitions and the theoretical flow, then delve into a concrete demonstration scenario, tracing the journey of a sample HTTP request with specific data points at each stage.

3.1 Core Components and Responsibilities
The typical Spring Boot web application leverages a stack of technologies, each with a distinct purpose in handling an incoming HTTP request:

Servlet Container: (e.g., Apache Tomcat, Eclipse Jetty)

What it Is/Interface: Provides the runtime environment for web applications.
Responsibility: Listens on network ports for incoming HTTP connections, parses raw request data into a structured HttpServletRequest object, and manages the overall lifecycle of web components like Filters and Servlets. It orchestrates the execution of the filter chain.
Filter: (jakarta.servlet.Filter)

What it Is/Interface: An object that sits in the request processing pipeline before the target Servlet is invoked.
Responsibility: Intercepts incoming requests and outgoing responses. Filters can perform cross-cutting concerns such as logging, character encoding, security checks (like authentication and authorization), request wrapping, and response compression. A filter decides whether to pass the request to the next component in the chain or terminate processing.
DispatcherServlet: (org.springframework.web.servlet.DispatcherServlet)

What it Is/Interface: A special Servlet provided by Spring MVC.
Responsibility: Acts as the central front controller for Spring MVC applications. It receives requests that match its configured URL patterns (often / or /*), delegates processing to various Spring MVC components (like HandlerMappings, HandlerAdapters, ViewResolvers), and orchestrates the execution of HandlerInterceptors and controllers.
HandlerInterceptor: (org.springframework.web.servlet.HandlerInterceptor)

What it Is/Interface: Allows for interception of the request processing within the Spring MVC framework, specifically around the controller invocation.
Responsibility: Provides hooks before (preHandle), after (postHandle), and after completion (afterCompletion) of a controller method execution. Common uses include logging, modifying the ModelAndView, checking user permissions (though typically handled by Spring Security Filters), or managing locale information.
Controller: (@Controller or @RestController)

What it Is/Interface: A Spring-managed bean.
Responsibility: Handles specific incoming URL patterns and HTTP methods (@RequestMapping, @GetMapping, etc.). It processes the request parameters, invokes service layer methods to perform business logic, and prepares data to be returned, either as a logical view name or as a response body (e.g., JSON, XML).
Service Layer: (@Service)

What it Is/Interface: A Spring-managed bean representing the business logic layer.
Responsibility: Contains the core business rules and orchestrates interactions between controllers and repositories. It often defines transactional boundaries using Spring's transaction management.
Repository / DAO Layer: (@Repository, CrudRepository, JpaRepository, etc.)

What it Is/Interface: A Spring-managed bean or interface for data access.
Responsibility: Interacts directly with the persistence layer (e.g., database) to retrieve, store, update, or delete data. Using Spring Data JPA or similar technologies, this often involves defining simple interfaces for common data operations.
ViewResolver: (org.springframework.web.servlet.ViewResolver)

What it Is/Interface: A Spring MVC component.
Responsibility: Maps a logical view name returned by a controller (e.g., "users/list") to a physical view implementation (e.g., a Thymeleaf template file or a JSP page).
View: (Specific to the view technology, e.g., a .html file for Thymeleaf)

What it Is/Interface: The presentation template.
Responsibility: Takes the model data provided by the controller and renders the final output, typically HTML, that is sent back to the client.
3.2 Order of Execution (Inbound Request)
The journey of an HTTP request through these components follows a well-defined sequence. Understanding this order is crucial for correctly placing custom logic (like security filters or request logging).

Servlet Container: The process begins when the Servlet Container accepts an incoming TCP connection and parses the raw byte stream into a high-level HttpServletRequest and HttpServletResponse object pair.
Global Filters (Servlet Filters): The container then passes the request and response through a chain of configured jakarta.servlet.Filters. These filters execute in a specific order determined by their configuration (e.g., @Order annotation, FilterRegistrationBean). Each filter performs its task and then explicitly calls chain.doFilter(request, response) to pass control to the next filter in the chain, or finally to the target Servlet (in a Spring MVC app, this is usually the DispatcherServlet). Examples include:
CorsFilter (handling Cross-Origin requests)
Security Filters (a series of filters managed by Spring Security, including our focus, JwtAuthorizationFilter)
LoggingFilter (logging request details)
Any other custom filters.
DispatcherServlet: If the URL pattern matches the DispatcherServlet's configuration, the request is passed to it by the final filter in the chain. The DispatcherServlet acts as the gateway to the Spring MVC world.
HandlerInterceptors (preHandle): Before the DispatcherServlet attempts to locate and invoke a controller, it executes the preHandle method of any configured HandlerInterceptors. Interceptors are processed in a defined order. An interceptor's preHandle method can halt the processing chain if necessary (e.g., for permission checks, though security filters are preferred for authentication/authorization).
Controller: The DispatcherServlet determines the appropriate controller method (@GetMapping, @PostMapping, etc.) based on the request URL and method. It then invokes this controller method, potentially injecting request parameters, path variables, or even the Authentication object from the SecurityContextHolder.
Service Layer: The controller typically delegates business logic execution to one or more @Service beans. This layer contains the core application logic, orchestrates operations, and manages transactions.
Repository/DAO Layer: Services interact with @Repository or DAO components to perform database operations, translating business needs into data persistence or retrieval calls.
Response Construction:
If the controller returns a logical view name (e.g., a String, ModelAndView), the DispatcherServlet uses the configured ViewResolver to locate the corresponding View template. The view is then rendered using the model data.
If the controller is annotated with @ResponseBody or @RestController, Spring uses an HttpMessageConverter (like Jackson for JSON) to serialize the return value (e.g., a Java object, a List) directly into the HTTP response body.
HandlerInterceptors (postHandle & afterCompletion):
postHandle is called after the controller method has executed but before the view is rendered (or the response body is written by a converter). It's useful for adding to the model or performing minor modifications before rendering.
afterCompletion is called after the entire request has been processed, including view rendering or response body writing. It's suitable for cleanup, resource release, or metrics logging regardless of whether the request succeeded or failed.
Global Filters (Post-processing): The response then travels back up the filter chain. Filters can perform post-processing tasks on the response before it's sent back to the client, such as adding security headers, compressing the body, or logging response details.
Servlet Container: Finally, the Servlet Container serializes the HttpServletResponse object back into a raw HTTP response byte stream and sends it over the network to the client.
3.3 The Role of JwtAuthorizationFilter
Within the ordered sequence of Global Filters, Spring Security inserts its own set of filters to protect application resources. The JwtAuthorizationFilter is a crucial component in a stateless, token-based security setup. Typically extending OncePerRequestFilter to ensure it runs only once per request, its core responsibility is to validate an incoming JWT and establish the user's identity for the duration of that request.

Java

public class JwtAuthorizationFilter extends OncePerRequestFilter {
    // ... fields like TOKEN_PREFIX, HEADER_STRING, tokenProvider ...

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain chain) throws ServletException, IOException {

        String header = request.getHeader(HEADER_STRING); // 1. Extract header

        // 2. Check if token is present and starts with the expected prefix
        if (header == null || !header.startsWith(TOKEN_PREFIX)) {
            // If not, skip this filter's logic and pass to the next
            chain.doFilter(request, response);
            return;
        }

        // 3. Extract the raw token
        String token = header.replace(TOKEN_PREFIX, "");

        try {
            // 4. Validate the token and extract authentication details
            if (tokenProvider.validateToken(token)) { // Uses JwtTokenProvider
                Authentication auth = tokenProvider.getAuthentication(token); // Gets UsernamePasswordAuthenticationToken, etc.
                // 5. Set the Authentication in the SecurityContextHolder
                SecurityContextHolder.getContext().setAuthentication(auth);
            }
        } catch (Exception e) {
            // Handle validation errors (e.g., expired token, invalid signature)
            // Often, this would clear the context and/or set an error response
            SecurityContextHolder.clearContext();
            // Response handling might be done here or by ExceptionTranslationFilter
            // For simplicity, we'll assume ExceptionTranslationFilter handles downstream
            // errors after doFilter().
        }

        // 6. Pass the request to the next filter in the chain
        chain.doFilter(request, response);
    }
}
As shown in the code, the JwtAuthorizationFilter examines the Authorization header. If a valid JWT is found, it uses a JwtTokenProvider (a helper class you would implement) to parse and validate the token. The key action is then taking the user's identity and authorities extracted from the token and setting them in the SecurityContextHolder. This static holder makes the authenticated Authentication object available to any subsequent component in the request processing chain, including other security filters (like FilterSecurityInterceptor), HandlerInterceptors, and the Controller itself. Regardless of whether the token was valid or not, the filter calls chain.doFilter(), ensuring the request continues through the rest of the pipeline.

3.4 Demo Scenario: GET /api/books for User "alice"
Let's trace the path of a specific request: a client attempting to retrieve a list of books belonging to a user named "alice", sending a valid JWT in the Authorization header.

Scenario Setup:

A Spring Boot application is running, configured with a JwtAuthorizationFilter placed early in the security filter chain (e.g., after the CorsFilter and before Spring Security's default filters).
The endpoint /api/books is secured, requiring the ROLE_USER authority, potentially via a @PreAuthorize("hasRole('ROLE_USER')") annotation on the controller method.
A user "alice" has successfully logged in previously and holds a valid JWT: eyJ...XYZ. This token's payload, after decoding and verification, confirms the subject (sub) is "alice" and includes an authority or role claim indicating ROLE_USER.
Request Flow Walkthrough:

Client Initiates Request: The client sends the following HTTP request:

HTTP

GET /api/books HTTP/1.1
Host: api.example.com
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbGljZSIsInJvbGVzIjoiUk9MRV9VU0VSIiwiaWF0IjoxNzAwOTIwMDAwLCJleHAiOjE3MDA5MjM2MDB9.SomeSignatureHere...
Accept: application/json
Data State: Raw HTTP request received by the server port.

Servlet Container: The container accepts the connection and parses the request into HttpServletRequest and HttpServletResponse objects.
Data State: HttpServletRequest object available, including headers like Host, Authorization, Accept, and the request URI /api/books.

Filter Chain - CorsFilter: The request enters the filter chain. The CorsFilter checks CORS headers and adds appropriate response headers if needed (e.g., Access-Control-Allow-Origin). It then calls chain.doFilter().
Data State: HttpServletRequest potentially modified (e.g., wrapped), HttpServletResponse potentially has CORS headers added. Request passed to the next filter.

Filter Chain - JwtAuthorizationFilter: The request reaches your custom filter.

doFilterInternal is invoked.
request.getHeader("Authorization") returns "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbGljZSIsInJvbGVzIjoiUk9MRV9VU0VSIiwiaWF0IjoxNzAwOTIwMDAwLCJleHAiOjE3MDA5MjM2MDB9.SomeSignatureHere...".
The code removes the "Bearer " prefix, resulting in the token string "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhbGljZSIsInJvbGVzIjoiUk9MRV9VU0VSIiwiaWF0IjoxNzAwOTIwMDAwLCJleHAiOjE3MDA5MjM2MDB9.SomeSignatureHere...".
tokenProvider.validateToken(...) is called. Assuming the signature is correct and the token is not expired, this returns true.
tokenProvider.getAuthentication(...) is called with the token string. This method parses the token payload, extracts the sub ("alice") and roles ("ROLE_USER") claims, and constructs an Authentication object (e.g., a UsernamePasswordAuthenticationToken) containing these details.
SecurityContextHolder.getContext().setAuthentication(auth); is called. The created Authentication object is stored in a ThreadLocal variable managed by SecurityContextHolder. Data State: SecurityContextHolder now contains an Authentication object representing the authenticated user "alice" with authority "ROLE_USER". Request remains unchanged.
chain.doFilter(request, response); is called, passing the request (with the established security context) to the next filter.
Filter Chain - LoggingFilter: A logging filter might record the request details, potentially now including the authenticated username retrieved from the SecurityContextHolder. It calls chain.doFilter().
Data State: Request/Response unchanged. Log entry created. Request passed to the next component.

DispatcherServlet: The request arrives at the DispatcherServlet. It consults its HandlerMappings to find the controller method that handles GET /api/books. It identifies BookController.listBooks().
Data State: DispatcherServlet prepares for controller invocation.

HandlerInterceptors (preHandle): Configured interceptors run their preHandle logic.

LocaleInterceptor might set the user's locale based on request headers or session data.
MetricsInterceptor records the start time of the controller processing.
Both call the next interceptor or proceed to the controller. Data State: Thread-local context (like locale) potentially updated. Metrics recorded.
Controller (BookController.listBooks): The DispatcherServlet invokes the controller method.

public List<Book> listBooks(Authentication auth): Spring MVC's argument resolvers detect the Authentication auth parameter. It retrieves the Authentication object from the SecurityContextHolder (which was set by JwtAuthorizationFilter) and injects it into the method. The auth object contains "alice" as the principal name and "ROLE_USER" as an authority.
The code inside the method calls bookService.findBooksForUser("alice"). Data State: Controller method starts execution. Authentication object available directly.
Service Layer (BookService): The findBooksForUser("alice") method in the service layer is executed.

This method might call the repository: repo.findByOwner("alice").
Alternatively, as in the demo code, it might return hardcoded data for demonstration: List.of(new Book("1984","Orwell"), new Book("Brave New World","Huxley")). Data State: Business logic processed. A List<Book> object is produced.
Repository Layer (BookRepository): (If the service calls it) The repository interacts with the database, executing a query like SELECT title, author FROM books WHERE owner = 'alice'. It maps the database results back into Book objects.
Data State: Database queried. Data retrieved and mapped into Java objects.

Response Construction: The List<Book> object is returned from the controller. Since BookController is a @RestController, Spring uses an HttpMessageConverter (e.g., MappingJackson2HttpMessageConverter). This converter serializes the List<Book> into a JSON string.
Data State: JSON byte stream generated: [ { "title":"1984", "author":"Orwell" }, { "title":"Brave New World", "author":"Huxley" }]. This is written to the HttpServletResponse's output stream.

HandlerInterceptors (postHandle & afterCompletion): The response travels back through the interceptors in reverse order for post-processing.

MetricsInterceptor records the end time and calculates execution duration.
LocaleInterceptor might clean up thread-local locale settings. Data State: Metrics updated. Thread-local cleanup.
Filter Chain (Post-processing): The response continues back up the filter chain.

LoggingFilter logs the response status (e.g., 200 OK) and potentially the execution time.
JwtAuthorizationFilter: This filter has already done its work on the inbound request and typically performs no action on the outbound response.
CorsFilter: Might add additional CORS headers or check response headers. Data State: Response headers or body potentially modified by filters. Log entry completed.
Servlet Container: The Servlet Container receives the completed HttpServletResponse, serializes it into an HTTP response byte stream, and sends it back to the client over the network connection.
Data State: Raw HTTP response sent to the client.

3.5 Data and Task Flow Summary
The journey highlights the clear separation of concerns. Filters handle essential cross-cutting tasks like security and logging before the request enters the Spring MVC core. The DispatcherServlet acts as the central router within Spring MVC, orchestrating the flow through interceptors, controllers, services, and repositories. The JwtAuthorizationFilter's specific role is to authenticate the user based on the JWT and make that authentication information available early in the process via the SecurityContextHolder, allowing subsequent security checks (FilterSecurityInterceptor) and business logic to operate on behalf of an authenticated principal.

The flow can be visualized as a pipeline where the request object is enriched or checked at various stages:

Code snippet

flowchart LR
    Client[Client: HTTP Request\n(with JWT)] --> SC(Servlet Container)
    SC --> F1(Filter 1\n e.g. CORS)
    F1 --> F2(Filter 2\nJwtAuthorizationFilter)
    F2 --> F3(Filter 3\n e.g. Logging)
    F3 --> DS(DispatcherServlet)
    DS --> HI_pre(Handler Interceptors\npreHandle)
    HI_pre --> C(Controller)
    C --> S(Service)
    S --> R(Repository)
    R -->|DB Interaction| DB[(Database)]
    DB -->|Data| R
    R -->|Results| S
    S -->|Business Result| C
    C --> Response_Gen(Response Generation\n(Converter/View))
    Response_Gen --> HI_post(Handler Interceptors\npostHandle/afterCompletion)
    HI_post --> DS
    DS --> F3_resp(Filter 3\nResponse)
    F3_resp --> F2_resp(Filter 2\nResponse)
    F2_resp --> F1_resp(Filter 1\nResponse)
    F1_resp --> SC_resp(Servlet Container\nResponse)
    SC_resp --> Client

    F2 -- Set SecurityContext --> SecurityContext[(SecurityContextHolder)]
    C -- Access SecurityContext --> SecurityContext
    FilterSecurityInterceptor(FilterSecurityInterceptor) -- Check SecurityContext --> SecurityContext
    F3 --> FilterSecurityInterceptor -- Calls chain.doFilter() --> DS
    FilterSecurityInterceptor -- Authorization Decision --> DS

    %% Link security filter specifically
    subgraph Spring Security Filters
    direction LR
    F_AuthZ(JwtAuthorizationFilter)
    F_Other(Other Security Filters)
    F_AuthZI(FilterSecurityInterceptor)
    end
    F1 --> F_AuthZ
    F_AuthZ --> F_Other
    F_Other --> F_AuthZI
    F_AuthZI --> F3
    SecurityContext[(SecurityContextHolder)] --> F_AuthZI

    classDef hook fill:#f9f,stroke:#333,stroke-width:2px;
    HI_pre,HI_post classDef hook;
Filters, including our JwtAuthorizationFilter, are invoked sequentially before the DispatcherServlet. Their role is 
to process the request and potentially enrich it (like adding authentication information) before passing it along using
 chain.doFilter(). The DispatcherServlet then takes over, managing the Spring MVC specific lifecycle, including interceptors,
  controller invocation, and response generation. The data flows down from controller to repository and back up, while the 
  request/response objects traverse the filter and interceptor chains. This layered, modular architecture ensures separation
   of concerns and enhances testability and maintainability.
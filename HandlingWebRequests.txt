Chapter: Handling Web Requests with Spring MVC
Developing robust, maintainable, and testable applications with the Spring Framework hinges on understanding a few core concepts. Among the most fundamental are Dependency Injection (DI), which governs how components receive their collaborators, and Request Mapping, which defines how incoming web requests are routed to the appropriate code. Let's delve into these essential aspects.

Mapping Incoming Web Requests
Building web applications involves receiving data from a client, processing it, and sending back a response. In Spring Web MVC, controller methods handle these interactions. The process of routing an incoming HTTP request to the correct method is managed by Spring's central servlet, the DispatcherServlet.

When a request arrives, Spring’s DispatcherServlet uses a combination of the HTTP method (GET, POST, PUT, DELETE, etc.) and the URL path to pick exactly one handler method in your controller to process that request. Here’s a step-by-step look at how this selection process unfolds:

The Request Mapping Lifecycle
The DispatcherServlet as the Gateway:
All incoming HTTP requests directed to your Spring application (typically mapped via your web.xml or a Java configuration equivalent) first arrive at the DispatcherServlet. It is the initial point of contact and the orchestrator of the Spring MVC request processing pipeline.

Handler Mapping: Matching Method and Path:
Upon receiving a request, the DispatcherServlet consults one or more Handler Mappings. These components are responsible for figuring out which controller method is capable of handling the request. Spring, when configured with annotations (like @Controller and @RestController), automatically scans your classes for annotations like @GetMapping, @PostMapping, @PutMapping, etc. It builds an internal map where the key is a combination of the HTTP method and the request path pattern, and the value is the corresponding handler method.

Consider this mapping table Spring might build internally based on your controller annotations:

| Annotation             | HTTP Method | Path Pattern       |
| :--------------------- | :---------- | :----------------- |
| @PostMapping("/books") | POST        | /api/books       |
| @GetMapping("/books")  | GET         | /api/books       |
| @GetMapping("/{id}")  | GET         | /api/books/{id}  |
| @PutMapping("/{id}")  | PUT         | /api/books/{id}  |
| @DeleteMapping("/{id}")| DELETE      | /api/books/{id}  |

(Assuming a class-level @RequestMapping("/api") or similar base path.)

Path Pattern Matching Rules:
Spring's path matching is flexible, supporting both exact matches and path variables.

Exact Match: A request to /api/books will precisely match the pattern /api/books.
Template Match: A request to /api/books/42 will match the pattern /api/books/{id}. Spring is smart enough to extract the value 42 from the path and make it available to your method, typically via the @PathVariable annotation (e.g., @PathVariable Long id).
Selecting the Unique Method:
Using the HTTP method of the incoming request and applying the path matching rules, Spring identifies the single handler method that most specifically matches the request. Let's look at some examples based on the mapping table above:

A POST /api/books request: Matches the POST method and the /api/books path pattern. This would invoke the method annotated with @PostMapping("/books") (like our createBook method from a previous example).
A GET /api/books request: Matches the GET method and the /api/books path pattern. This would typically invoke a method like getAllBooks() annotated with @GetMapping("/books").
A GET /api/books/7 request: Matches the GET method and the /api/books/{id} path pattern. The value 7 is captured as the id. This would invoke a method like getBookById(@PathVariable Long id).
A PUT /api/books/7 request: Matches the PUT method and the /api/books/{id} path pattern. This would invoke a method like updateBook(@PathVariable Long id, @RequestBody BookDTO bookDTO).
A DELETE /api/books/7 request: Matches the DELETE method and the /api/books/{id} path pattern. This would invoke a method like deleteBook(@PathVariable Long id).
Content Negotiation (An Optional Layer):
In more complex scenarios, you might have methods that can handle the same URL path and HTTP method but differ based on the expected content type of the request body (Content-Type header) or the desired format of the response (Accept header). Spring can also use these headers as criteria for selecting the most appropriate method. By default, Spring Boot configures converters that often make JSON the implicitly assumed format if headers aren't explicitly specified.

In a Nutshell:

Spring's request mapping mechanism is a sophisticated process that combines:

The HTTP method annotation (e.g., @GetMapping vs @PostMapping).
The URL path pattern defined in the annotation (e.g., /api/books vs /api/books/{id}).
(Occasionally) The Content-Type or Accept headers for content negotiation.
By evaluating these factors, Spring efficiently and unambiguously selects exactly one handler method to take over and process each incoming web request.

Scaling Your Endpoints: Are There Limits?
A common question that arises when dealing with many endpoints is whether there's a hard limit to the number of handler methods you can define within a single controller or across your entire application. The good news is, Spring imposes no arbitrary "maximum" number of handler methods. You're not constrained by a fixed count, but rather by logical constraints related to ensuring Spring can unambiguously route requests.

The practical bounds on the number of handler methods are primarily determined by:

The Set of HTTP Verbs: You are working within the standard set of HTTP methods (GET, POST, PUT, DELETE, PATCH, OPTIONS, HEAD). While you could theoretically define custom ones, you'll primarily use this fixed, handful of verbs.
The Requirement for Unique Mappings: This is the critical constraint. For Spring to correctly identify which method should handle an incoming request, each handler method must have a unique signature based on the combination of:
The HTTP verb annotation used (@GetMapping, @PostMapping, @PutMapping, @DeleteMapping, etc.).
The URL path or path pattern defined in the annotation (e.g., /api/books, /api/books/{id}, /api/users).
(Optionally) Specific consumes or produces media types if your application differentiates methods based on content type (e.g., one POST method for JSON, another for XML on the same path).
Spring is designed to enforce this uniqueness. If you inadvertently map two methods to the exact same combination of verb, path pattern, and content types, Spring will detect this ambiguity during application startup and will refuse to deploy, throwing an exception. This prevents runtime errors where Spring wouldn't know which method to invoke.

Beyond this essential uniqueness requirement, you are free to add as many endpoints and corresponding handler methods as your application architecture demands. The key to managing a large number of endpoints is not a technical limit within Spring, but rather good organizational principles – typically, splitting your handler methods into multiple controllers, logically grouped by feature, resource, or domain area, to maintain code clarity and manageability.

In Practice:

There is no fixed numeric limit on the number of handler methods or URL paths you can map in Spring.
The only absolute requirement is that each handler method must have a unique and unambiguous mapping defined by its HTTP verb, path pattern, and optionally, consumed/produced media types.
This design allows Spring MVC applications to scale to handle a large number of diverse API endpoints while relying on the framework to ensure correct and predictable request routing.


Spring is designed to enforce this uniqueness. If you inadvertently map two methods to the exact same combination of verb, path pattern, and content types, Spring will detect this ambiguity during application startup and will refuse to deploy, throwing an exception. This prevents runtime errors where Spring wouldn't know which method to invoke.

Example: Startup Failure Due to Ambiguous Mapping

To make this concrete, consider the following controller snippet where a developer has accidentally defined two methods mapped to the exact same HTTP GET request for a specific book ID:

Java

@RestController
@RequestMapping("/api/books")
public class BookController {

    // 1st handler for GET /api/books/{id}
    @GetMapping("/{id}")
    public ResponseEntity<BookDTO> getBookById(@PathVariable Long id) {
        // Logic to fetch book by ID...
        // return ...;
        return ResponseEntity.ok().build(); // Placeholder return
    }

    // 2nd handler accidentally mapped to the same GET /api/books/{id}
    @GetMapping("/{id}")
    public ResponseEntity<BookDTO> fetchBook(@PathVariable Long id) {
        // Alternative logic to fetch book by ID...
        // return ...;
         return ResponseEntity.ok().build(); // Placeholder return
    }
}
When you attempt to start your Spring Boot application with this configuration, the Spring context initialization will fail. You will see an error message in your console output similar to this:

Plaintext

Caused by: java.lang.IllegalStateException: Ambiguous mapping. Cannot map 'bookController' method public org.springframework.http.ResponseEntity<com.example.BookDTO> fetchBook(java.lang.Long) to {GET [/api/books/{id}]}: There is already 'bookController' bean method public org.springframework.http.ResponseEntity<com.example.BookDTO> getBookById(java.lang.Long) mapped.
    at org.springframework.web.servlet.handler.AbstractMethodsMapping<...>.addMapping(AbstractMethodsMapping.java:...)
    at org.springframework.web.servlet.mvc.method.request.RequestMappingInfoHandlerMapping.addMappedMethod(RequestMappingInfoHandlerMapping.java:...)
    ... (further stack trace)
Why this happens:

Both the getBookById method and the WorkspaceBook method are annotated with @GetMapping("/{id}"). Since they are within the same controller (with a base path of /api/books), their combined mapping is GET /api/books/{id}. Spring's handler mapping process discovers two different methods that claim to handle the exact same incoming request signature, creating an ambiguity it cannot resolve automatically. Because it cannot definitively know which method to call for GET /api/books/123 (or any ID), it prevents the application from starting to avoid unpredictable behavior.

How to Fix Ambiguous Mappings:

Resolving an ambiguous mapping error requires making one of the conflicting mappings unique. Common strategies include:

Adjust the Path: Change the URL path for one of the methods. For example, you could rename or adjust the path pattern:

Java

@GetMapping("/by-id/{id}") // Changed path
public ResponseEntity<BookDTO> fetchBook(@PathVariable Long id) {
    // ...
}
Now the mappings are GET /api/books/{id} and GET /api/books/by-id/{id}, which are distinct.

Merge Logic: If the two methods are intended to retrieve the same type of resource using the same identifier, it often indicates that their logic should be merged into a single handler method. Refactor your code to have one method handle that specific endpoint.

Differentiate by Media Type (Less Common for Simple GET): For scenarios where the same resource at the same URL should be returned in different formats based on the client's Accept header, you can use the produces attribute:

Java

@GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
public BookDTO jsonBook(...) { ... }

@GetMapping(path = "/{id}", produces = MediaType.APPLICATION_XML_VALUE)
public BookDTO xmlBook(...) { ... }
Now the mappings are GET /api/books/{id} requesting application/json and GET /api/books/{id} requesting application/xml, which are distinct based on content negotiation.

As long as each combination of HTTP verb + path (+ optional consumes/produces) is unique across all your controllers that are mapped to overlapping paths, Spring will start up without conflicts and correctly route incoming requests.